import React, { useEffect, useState } from "react";
import { View, Text, StyleSheet, ActivityIndicator, ScrollView } from "react-native";
import { getCurrentChildWithDetails } from "@/services/children";
import { analyzeText } from "@/src/api/gemini";
import { ATTACK_PROMPT } from "@/src/prompts";

export function AttackPeriodsView() {
    const [child, setChild] = useState<any>(null);
    const [periods, setPeriods] = useState<any[]>([]);
    const [summary, setSummary] = useState<string>("");
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        (async () => {
            const c = await getCurrentChildWithDetails();
            setChild(c);

            if (c?.birthdate) {
                const birth = new Date(c.birthdate);
                const today = new Date();
                const ageMonths =
                    (today.getFullYear() - birth.getFullYear()) * 12 +
                    (today.getMonth() - birth.getMonth());

                try {
                    const prompt = ATTACK_PROMPT(c.name, ageMonths);
                    const aiResult = await analyzeText(prompt);

                    const clean = aiResult.replace(/```json|```/g, "").trim();
                    const parsed = JSON.parse(clean);

// üîπ Sƒ±ralama ekle: ≈üu anda > yakla≈üan > ge√ßildi
                    const sorted = (parsed.periods || []).sort((a: any, b: any) => {
                        const order: Record<string, number> = {
                            "≈üu anda": 0,
                            "yakla≈üan": 1,
                            "ge√ßildi": 2,
                        };
                        return (order[a.status] ?? 99) - (order[b.status] ?? 99);
                    });

                    setSummary(parsed.summary || "");
                    setPeriods(sorted);
                } catch (err) {
                    console.error("‚ùå Attack API hatasƒ±:", err);
                }
            }
            setLoading(false);
        })();
    }, []);

    if (!child) {
        return (
            <View style={styles.page}>
                <Text style={styles.title}>‚ö° Atak D√∂nemleri</Text>
                <Text>√áocuk bilgisi bulunamadƒ±</Text>
            </View>
        );
    }

    if (loading) {
        return (
            <View style={styles.page}>
                <ActivityIndicator size="large" color="#3b82f6" />
            </View>
        );
    }

    return (
        <ScrollView style={styles.page} contentContainerStyle={{ paddingBottom: 30 }}>
            <Text style={styles.title}>‚ö° {child.name} i√ßin Atak D√∂nemleri</Text>

            {/* üîπ √ñzet Kartƒ± */}
            {summary ? (
                <View style={styles.summaryCard}>
                    <Text style={styles.summaryTitle}>üìå Genel √ñzet</Text>
                    <Text style={styles.summaryText}>{summary}</Text>
                </View>
            ) : null}

            {/* üîπ Atak Listesi */}
            {periods.length > 0 ? (
                periods.map((p, idx) => {
                    let cardStyle = styles.futureCard;
                    if (p.status === "ge√ßildi") cardStyle = styles.pastCard;
                    if (p.status === "≈üu anda") cardStyle = styles.currentCard;

                    return (
                        <View key={idx} style={[styles.periodCard, cardStyle]}>
                            <Text style={styles.periodTitle}>
                                {p.status === "ge√ßildi" ? "‚úÖ " : p.status === "≈üu anda" ? "üî• " : "‚è≥ "}
                                {p.title}
                            </Text>
                            <Text style={styles.periodDesc}>{p.description}</Text>
                            <Text style={styles.periodStatus}>Durum: {p.status}</Text>
                        </View>
                    );
                })
            ) : (
                <Text>Atak d√∂nemi bilgisi bulunamadƒ±</Text>
            )}
        </ScrollView>
    );
}

const styles = StyleSheet.create({
    page: { flex: 1, padding: 16, backgroundColor: "#0f172a" },
    title: {
        fontSize: 24,              // üîπ Daha b√ºy√ºk
        fontWeight: "800",         // üîπ Daha kalƒ±n
        marginBottom: 20,
        color: "#facc15",          // üîπ Sarƒ± (arka planda √ßok dikkat √ßeker)
        textAlign: "center"        // üîπ Ortalayƒ±p daha g√º√ßl√º g√∂r√ºn√ºm
    },

    summaryCard: {
        padding: 16,
        borderRadius: 12,
        marginBottom: 20,
    },
    summaryTitle: { color: "#93c5fd", fontSize: 16, fontWeight: "600", marginBottom: 6 },
    summaryText: { color: "#e0f2fe", fontSize: 14, lineHeight: 20 },

    periodCard: {
        padding: 16,
        borderRadius: 12,
        marginBottom: 12,
    },
    periodTitle: { fontSize: 16, fontWeight: "600", marginBottom: 6, color: "#fff" },
    periodDesc: { fontSize: 14, color: "#e5e7eb" },
    periodStatus: { fontSize: 12, marginTop: 6, fontStyle: "italic", color: "#cbd5e1" },

    // üîπ Duruma g√∂re renkler
    pastCard: { backgroundColor: "#334155" }, // Gri ton: ge√ßmi≈ü
    currentCard: { backgroundColor: "#166534" }, // Ye≈üil ton: ≈üu anda
    futureCard: { backgroundColor: "#1e3a8a" }, // Mavi ton: yakla≈üan
});
